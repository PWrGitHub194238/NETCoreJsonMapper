<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CMD_APP_DESC" xml:space="preserve">
    <value>A .NET Core 3.0 project to convert one JSON formatted file to another based on a given source and target classes loaded dynamically.</value>
  </data>
  <data name="CMD_INPUT_DESC" xml:space="preserve">
    <value>A full path to the directory from which all JSON formatted files will be processed.</value>
  </data>
  <data name="CMD_INPUT_VALIDATE_ERROR_NOT_EXIST" xml:space="preserve">
    <value>The given input directory: '{0}' does not exists.\n</value>
  </data>
  <data name="CMD_INPUT_VALIDATE_NO_INPUT" xml:space="preserve">
    <value>No input parameter has been defined.</value>
  </data>
  <data name="CMD_OUTPUT_DESC" xml:space="preserve">
    <value>A full path to the directory where all outputed JOSN formatted files will be saved.</value>
  </data>
  <data name="CMD_OUTPUT_VALIDATE_ERROR_CREATE_DIR" xml:space="preserve">
    <value>Cannot create a given output directory: `{0}'. An error has occurred: '{1}'.</value>
  </data>
  <data name="CMD_OUTPUT_VALIDATE_ERROR_NOT_SET" xml:space="preserve">
    <value>No output directory was defined.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_INPUT_OPTION_PARAM_VALIDATION" xml:space="preserve">
    <value>Validating for a directory existance on path: '{0}'.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_INPUT_OPTION_VALIDATION" xml:space="preserve">
    <value>Start validation for input parameters: '{0}'.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_OPTIONS" xml:space="preserve">
    <value>Application has been started with the following input: '{0}' and output: '{1}' parameters.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_OUTPUT_NOT_EXISTS_VALIDATION" xml:space="preserve">
    <value>Directory on a given path: '{0}' does not exists. Attempt to create one.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_OUTPUT_OPTION_VALIDATION" xml:space="preserve">
    <value>Start validation for output parameters: '{0}'.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_VALIDATION_SUMMARY" xml:space="preserve">
    <value>A program could not start because of command line parameters validation error: '{0}'.</value>
  </data>
  <data name="LOG_VERBOSE_CMD_LINE_YIELD_JSON_SOURCE_FILE_PATH" xml:space="preserve">
    <value>A JSON file with a name: '{0}' within a given directory: '{1}' is found and will be processed.</value>
  </data>
  <data name="LOG_VERBOSE_LOAD_LOCAL_ASSEMBLY_FROM_PATH" xml:space="preserve">
    <value>Load a local assembly on the path '{0}' to resolve classes that implements  the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_SOURCE_CLASS_FROM_ASSEMBLIES" xml:space="preserve">
    <value>Resolving fully qualified class names implementing NETCoreJsonMapper.Interfaces.Mappings.IJsonDataSource&lt;{0}&gt; interface from avaliable assemblies.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_SOURCE_CLASS_FROM_ASSEMBLY" xml:space="preserve">
    <value>Scanning a assembly of a fully qualified name '{0}' for any type that implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataSource&lt;{0}&gt; interface.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_SOURCE_CLASS_FROM_ASSEMBLY_VALID" xml:space="preserve">
    <value>Fully qualified class name '{0}' from the '{1}' assembly implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataSource&lt;{0}&gt; interface and will be used to store parsed input data from JSON files.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_TARGET_CLASS_FROM_ASSEMBLIES" xml:space="preserve">
    <value>Resolving fully qualified class names implementing NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface from avaliable assemblies.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_TARGET_CLASS_FROM_ASSEMBLY" xml:space="preserve">
    <value>Scanning a assembly of a fully qualified name '{0}' for any type that implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_TARGET_CLASS_FROM_ASSEMBLY_VALID" xml:space="preserve">
    <value>Fully qualified class name '{0}' from the '{1}' assembly implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface and will be used to parse input data from JSON files.</value>
  </data>
  <data name="LOG_VERBOSE_RESOLVE_JSON_TARGET_CLASS_FROM_LOCAL_ASSEMBLIES" xml:space="preserve">
    <value>Resolving fully qualified class names implementing the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface from avaliable local assemblies. Local assemblies are stored within the same directory as the main NETCoreJsonMapper assembly (they are marked as core assembly dependencies).</value>
  </data>
  <data name="LOG_VERBOSE_STARTUP_PARSE_FOR_SOURCE_JSON_CLASS_TYPE" xml:space="preserve">
    <value>Giving a list of JSON files: '{0}', the application will try to parse each one against the given class type: '{1}' and store results in the given output directory: '{2}'.</value>
  </data>
  <data name="LOG_VERBOSE_STARTUP_SCAN_FOR_SOURCE_JSON_CLASS_TYPE" xml:space="preserve">
    <value>Locating types within a local assembly set that implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataSource&lt;&gt; interface and are suitable for a given type: '{0}'. Local assemblies are stored within the same directory as the main NETCoreJsonMapper assembly.</value>
  </data>
  <data name="LOG_VERBOSE_STARTUP_SCAN_FOR_TARGET_JSON_CLASS_TYPE" xml:space="preserve">
    <value>Locating types within a local assembly set that implements the NETCoreJsonMapper.Interfaces.Mappings.IJsonDataTarget interface. Local assemblies are stored within the same directory as the main NETCoreJsonMapper assembly.</value>
  </data>
  <data name="LOG_VERBOSE_TRY_PARSE_JSON" xml:space="preserve">
    <value>The given set of JSON files '{0}' will be parsed agains a given '{1}' class type.</value>
  </data>
  <data name="LOG_VERBOSE_TRY_PARSE_JSON_FROM_PATH" xml:space="preserve">
    <value>Try to parse a JSON data from the file on the path: '{0}' against the given '{1}' class type.</value>
  </data>
  <data name="LOG_VERBOSE_TRY_PARSE_JSON_FROM_PATH_MATCH" xml:space="preserve">
    <value>The JSON data from the file on the path: '{0}' matches the definition of the class: '{1}' and will be processed.</value>
  </data>
  <data name="LOG_VERBOSE_TRY_PARSE_JSON_FROM_PATH_NOT_MATCH" xml:space="preserve">
    <value>The JSON data from the file on the path: '{0}' does NOT match the definition of the class: '{1}'.</value>
  </data>
</root>